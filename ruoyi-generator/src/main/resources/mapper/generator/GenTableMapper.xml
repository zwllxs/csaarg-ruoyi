<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.generator.mapper.GenTableMapper">

  <resultMap type="com.ruoyi.generator.domain.GenTable" id="GenTableResult">
    <id property="tableId" column="table_id"/>
    <result property="tableName" column="table_name"/>
    <result property="tableComment" column="table_comment"/>
    <result property="className" column="class_name"/>
    <result property="tplCategory" column="tpl_category"/>
    <result property="packageName" column="package_name"/>
    <result property="moduleName" column="module_name"/>
    <result property="businessName" column="business_name"/>
    <result property="functionName" column="function_name"/>
    <result property="functionAuthor" column="function_author"/>
    <result property="options" column="options"/>
    <result property="createBy" column="create_by"/>
    <result property="createTime" column="create_time"/>
    <result property="updateBy" column="update_by"/>
    <result property="updateTime" column="update_time"/>
    <result property="remark" column="remark"/>
    <collection property="columns" javaType="java.util.List" resultMap="GenTableColumnResult"/>
  </resultMap>

  <resultMap type="com.ruoyi.generator.domain.GenTableColumn" id="GenTableColumnResult">
    <id property="columnId" column="column_id"/>
    <result property="tableId" column="table_id"/>
    <result property="columnName" column="column_name"/>
    <result property="columnComment" column="column_comment"/>
    <result property="columnType" column="column_type"/>
    <result property="javaType" column="java_type"/>
    <result property="javaField" column="java_field"/>
    <result property="isPk" column="is_pk"/>
    <result property="isIncrement" column="is_increment"/>
    <result property="isRequired" column="is_required"/>
    <result property="isInsert" column="is_insert"/>
    <result property="isEdit" column="is_edit"/>
    <result property="isList" column="is_list"/>
    <result property="isQuery" column="is_query"/>
    <result property="queryType" column="query_type"/>
    <result property="htmlType" column="html_type"/>
    <result property="dictType" column="dict_type"/>
    <result property="sort" column="sort"/>
    <result property="createBy" column="create_by"/>
    <result property="createTime" column="create_time"/>
    <result property="updateBy" column="update_by"/>
    <result property="updateTime" column="update_time"/>
  </resultMap>

  <sql id="selectGenTableVo">
    select table_id,
           table_name,
           table_comment,
           class_name,
           tpl_category,
           package_name,
           module_name,
           business_name,
           function_name,
           function_author,
           options,
           create_by,
           create_time,
           update_by,
           update_time,
           remark
    from gen_table
  </sql>

  <select id="page" resultMap="GenTableResult">
    select gt.*
    from gen_table gt
    <where>
      <if test="genTable.tableName != null and genTable.tableName != ''">
        and lower(gt.table_name) like lower(concat('%', #{genTable.tableName}, '%'))
      </if>
      <if test="genTable.tableComment != null and genTable.tableComment != ''">
        and lower(gt.table_comment) like lower(concat('%', #{genTable.tableComment}, '%'))
      </if>
    </where>
  </select>

  <select id="pageDbTable" resultMap="GenTableResult">
    select table_name, table_comment, create_time, update_time from information_schema.tables
    where table_schema = (select database())
    and table_name not like 'qrtz_%' and table_name not like 'gen_%'
    and table_name not in (select table_name from gen_table)
    <if test="genTable.tableName != null and genTable.tableName != ''">
      and lower(table_name) like lower(concat('%', #{genTable.tableName}, '%'))
    </if>
    <if test="genTable.tableComment != null and genTable.tableComment != ''">
      and lower(table_comment) like lower(concat('%', #{genTable.tableComment}, '%'))
    </if>
  </select>

  <select id="listByNames" resultMap="GenTableResult">
    select table_name, table_comment, create_time, update_time from information_schema.tables
    where table_name NOT LIKE 'qrtz_%' and table_name NOT LIKE 'gen_%' and table_schema = (select database())
    and table_name in
    <foreach collection="array" item="name" open="(" separator="," close=")">
      #{name}
    </foreach>
  </select>

  <select id="getById" resultMap="GenTableResult">
    select t.table_id,
           t.table_name,
           t.table_comment,
           t.class_name,
           t.tpl_category,
           t.package_name,
           t.module_name,
           t.business_name,
           t.function_name,
           t.function_author,
           t.options,
           t.remark,
           c.column_id,
           c.column_name,
           c.column_comment,
           c.column_type,
           c.java_type,
           c.java_field,
           c.is_pk,
           c.is_increment,
           c.is_required,
           c.is_insert,
           c.is_edit,
           c.is_list,
           c.is_query,
           c.query_type,
           c.html_type,
           c.dict_type,
           c.sort
    from gen_table t
           LEFT JOIN gen_table_column c ON t.table_id = c.table_id
    where t.table_id = #{tableId}
    order by c.sort
  </select>

  <select id="getByName" resultMap="GenTableResult">
    select t.table_id,
           t.table_name,
           t.table_comment,
           t.class_name,
           t.tpl_category,
           t.package_name,
           t.module_name,
           t.business_name,
           t.function_name,
           t.function_author,
           t.options,
           t.remark,
           c.column_id,
           c.column_name,
           c.column_comment,
           c.column_type,
           c.java_type,
           c.java_field,
           c.is_pk,
           c.is_increment,
           c.is_required,
           c.is_insert,
           c.is_edit,
           c.is_list,
           c.is_query,
           c.query_type,
           c.html_type,
           c.dict_type,
           c.sort
    from gen_table t
           LEFT JOIN gen_table_column c ON t.table_id = c.table_id
    where t.table_name = #{tableName}
    order by c.sort
  </select>
</mapper> 